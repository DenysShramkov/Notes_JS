'use script';

window.addEventListener('DOMContentLoaded', () => {

	//const num = new Number(13); //Рабочий но неккоректный способ создавать переменную
});

//функции контрукторы использовались в ES5, однако в современном ES6 уже используются классы.
//Конструкторы же это то, как всё работает опд капотом

function User(name, id) {
	this.name = name;
	this.id = id;
	this.human = true;
	//теперь функция стала конструктором, с помощью не> можно создавать новых пользователей
	this.hello = function() {
		console.log(`Hello ${this.name}`);
	}; //таким образом в объект можно записать метод (функция)
}

User.prototype.exit = function() {
	console.log(`Пользователь ${this.name} вышел`);
}; //Добавить метод в прототип, который будет прототипно наследоваться всеми потомками

const denis = new User('Denis', 28); //внутри данной функции у нас будет находится уже не функция, а объект
//так как функция User стала конструктором, а при вызове через New она создает новый объект с указанными нами свойствами
const alex = new User('Alex', 30);

denis.exit(); //cможем вызвать метод, его будут наследовать все потомки, которые были созданы после объявления метода

console.log(denis);
console.log(alex); //на выходе два объекта
//такие фкнции нужны для конструирования об>етков и создания множества подобных копий

//конструктор необходим для создания новых однотипных объектов, например новые пользователи, товары на интернет магазине
//ролики на ютубе